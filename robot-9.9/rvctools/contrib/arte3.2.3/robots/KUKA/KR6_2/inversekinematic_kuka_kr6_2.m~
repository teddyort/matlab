%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Q = INVERSEKINEMATIC_KUKA_KR6_2(robot, T)	
%   Solves the inverse kinematic problem for the KUKA KR6_2 robot
%   where:
%   robot stores the robot parameters.
%   T is an homogeneous transform that specifies the position/orientation
%   of the end effector.
%
%   A call to Q=INVERSEKINEMATIC__KUKA_KR6_2 returns 8 possible solutions, thus,
%   Q is a 6x8 matrix where each column stores 6 feasible joint values.
%
%   
%   Example code:
%
%   robot=load_robot('kuka', 'KR6_2');
%   q = [0 0 0 0 0 0];	
%   T = directkinematic(robot, q);
%   %Call the inversekinematic for this robot
%   qinv = inversekinematic(robot, T);
%   check that all of them are feasible solutions!
%   and every Ti equals T
%   for i=1:8,
%        Ti = directkinematic(robot, qinv(:,i))
%   end
%	See also DIRECTKINEMATIC.
%   Author: C.Escoto, E.Le�n, V.Martinez & L.Mijares
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Copyright (C) 2012, by Arturo Gil Aparicio
%
% This file is part of ARTE (A Robotics Toolbox for Education).
% 
% ARTE is free software: you can redistribute it and/or modify
% it under the terms of the GNU Lesser General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% 
% ARTE is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU Lesser General Public License for more details.
% 
% You should have received a copy of the GNU Leser General Public License
% along with ARTE.  If not, see <http://www.gnu.org/licenses/>.
function q = inversekinematic_kuka_kr6_2(robot, T)

%initialize q,
%eight possible solutions are generally feasible
q=zeros(6,8);

% %Evaluate the parameters
% theta = eval(robot.DH.theta);
d = eval(robot.DH.d);
L6=abs(d(6));


%T= [ nx ox ax Px;
%     ny oy ay Py;
%     nz oz az Pz];
Px=T(1,4);
Py=T(2,4);
Pz=T(3,4);

%Compute the position of the wrist, being W the Z component of the end effector's system
W = T(1:3,3);

% Pm: wrist position
Pm = [Px Py Pz]' - L6*W; 

%first joint, two possible solutions admited: 
% if q(1) is a solution, then q(1) + pi is also a solution
q1=atan2(Pm(2), Pm(1));
%q1=atan2(Py, Px);


%solve for q2
q2_1=solve_for_theta2(robot, [q1 0 0 0 0 0 0], Pm);
%the other possible solution is q1 + pi
q2_2=solve_for_theta2(robot, [q1+pi 0 0 0 0 0 0], Pm);

%solve for q3
q3_1=solve_for_theta3(robot, [q1 0 0 0 0 0 0], Pm);
%solver for q3 for both cases
q3_2=solve_for_theta3(robot, [q1+pi 0 0 0 0 0 0], Pm);


%Arrange solutions, there are 4 possible solutions so far, being
% each column repeated twice. For each triplet (theta1, theta2, theta3),
% there exist two possible solutions for the last three joints, generally
% called wrist up and wrist down solutions
% NOTE: so far there exist 4 possible solutions
% q = [q1    q1     q1+pi  q1+pi;   
%      q2_1(1) q2_1(2)   q2_2(1)  q2_2(2);
%      q3_1(1) q3_1(2)  q3_2(1)  q3_2(2);
%      0          0           0       0;
%      0          0           0       0;
%      0          0           0       0];

%the next matrix doubles each column. For each two columns, two different
%configurations for theta4, theta5 and theta6 will be computed. These
%configurations are generally referred as wrist up and wrist down solution
q = [q1         q1         q1        q1       q1+pi   q1+pi   q1+pi   q1+pi;   
     q2_1(1)    q2_1(1)    q2_1(2)   q2_1(2)  q2_2(1) q2_2(1) q2_2(2) q2_2(2);
     q3_1(1)    q3_1(1)    q3_1(2)   q3_1(2)  q3_2(1) q3_2(1) q3_2(2) q3_2(2);
     0          0          0         0         0      0       0       0;
     0          0          0         0         0      0       0       0;
     0          0          0         0         0      0       0       0];

 %normalize q to [-pi, pi]
 q = normalize(q);

 % solve for the last three joints
 % for any of the three possible combinations (theta1, theta2, theta3)
 for i=1:2:8,
    qtemp = solve_for_last_three_joints(robot, q(:,i), T, 1); %wrist up
    q(:,i)=qtemp;
    
    qtemp = solve_for_last_three_joints(robot, q(:,i), T, -1); %wrist down
    q(:,i+1)=qtemp;    
 end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% solve for second joint theta2, two different
% solutions are returned, corresponding
% to elbow up and down solution
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function q2 = solve_for_theta2(robot, q, Pm)

%Evaluate the parameters
theta = eval(robot.DH.theta);
d = eval(robot.DH.d);
a = eval(robot.DH.a);
alpha = eval(robot.DH.alpha);

%See geometry
L2=abs(a(2));
L3=abs(d(4));
A2 = abs(a(3));

%See geometry of the robot
%compute L4
L4 = sqrt(A2^2 + L3^2);

%The inverse kinematic problem can be solved as in the IRB 140 (for example)

%given q1 is known, compute first DH transformation
T01=denavit(robot, q, 1);

%Express Pm in the reference system 1, for convenience
p1 = inv(T01)*[Pm; 1];

r = sqrt(p1(1)^2 + p1(2)^2);

beta = atan2(-p1(2), p1(1));
gamma = real(acos((L2^2+r^2-L4^2)/(2*r*L2)));

%return two possible solutions
%elbow up and elbow down
%the order here is important and is coordinated with the function
%solve_for_theta3
q2(1) = pi/2 - beta - gamma; %elbow up
q2(2) = pi/2 - beta + gamma; %elbow down


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% solve for third joint theta3, two different
% solutions are returned, corresponding
% to elbow up and down solution
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function q3 = solve_for_theta3(robot, q, Pm)

%Evaluate the parameters
d = eval(robot.DH.d);
a = eval(robot.DH.a);

%See geometry
L2=abs(a(2));
L3=abs(d(4));

A2 = abs(a(3));

%See geometry of the robot
%compute L4
L4 = sqrt(A2^2 + L3^2);

%the angle phi is fixed
phi=acos((A2^2+L4^2-L3^2)/(2*A2*L4));

%given q1 is known, compute first DH transformation
T01=denavit(robot, q, 1);

%Express Pm in the reference system 1, for convenience
p1 = inv(T01)*[Pm; 1];

r = sqrt(p1(1)^2 + p1(2)^2);

eta = real(acos((L2^2 + L4^2 - r^2)/(2*L2*L4)));

%return two possible solutions
%elbow up and elbow down solutions
%the order here is important
q3(1) =  atan(L3/ A2)-eta;
q3(2) =  atan(L3/ A2)+ eta;


% Solve for the last three joints asuming an spherical wrist
function q = solve_for_last_three_joints(robot, q, T, wrist)

% Obtain the position and orientation of the system 3
% using the already computed joints q1, q2 and q3
A01=denavit(robot, q, 1);
A12=denavit(robot, q, 2);
A23=denavit(robot, q, 3);
A03 = A01 * A12 * A23;
 
x3 = A03(1:3,1);
y3 = A03(1:3,2);
z3 = A03(1:3,3);

%T= [ nx ox ax Px;
%     ny oy ay Py;
%     nz oz az Pz];
a= T(1:3,3);

%find z4 normal to the plane formed by z3 and a
z4 = cross(z3, a);	% end effector's vector a: T(1:3,3)

% % Compute omega. If aux == 0, then we are in a degenerated case
aux = dot(T(1:3,2),z4);	% Vector orientaci�n s: T(1:3,2)
if aux ~= 0
     omega = aux;
else % if so, use n instead of a
     aux=dot(T(1:3,1),z4);	% Vector orientaci�n n: T(1:3,1)
     if aux ~=0
         omega=aux;
     else
         omega=0;
     end
end

M = wrist*sign(omega);
 
%M = wrist; 

cq4 = M*dot(z4, -y3);
sq4 = M*dot(z4, x3);
q(4)  = atan2(sq4, cq4);

% solve for q5
A34 = denavit(robot, q, 4);
A04 = A03 * A34;
x4  = A04(1:3, 1);
y4  = A04(1:3, 2);

z5  = T(1:3, 3);		% The vector a T(1:3,3) is coincident with z5 

cq5 = dot(z5, y4);	
sq5 = dot(z5, -x4);	% Vector de orientaci�n a: T(1:3,3)
q(5)  = atan2(sq5, cq5);
 
% solve for q6
x6  = T(1:3, 1);	% Vector de orientaci�n s: T(1:3,2)
 
A45 = denavit(robot, q, 5);
A05 = A04 * A45;
x5  = A05(1:3, 1);
y5  = A05(1:3, 2);

cq6 = dot(x6, x5);
sq6 = dot(x6, y5);	% Vector de orientaci�n n: T(1:3,1)
q(6)  = atan2(sq6, cq6);

